{"ast":null,"code":"var _jsxFileName = \"/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js\";\nimport React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModalComponent({\n  windowTextId,\n  handleNext,\n  modalIsOpen,\n  setModalIsOpenToFalse,\n  setModalIsOpenToTrue\n}) {\n  const windowTextList = [\"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\", `The main objective of generative LLMs such as ChatGPT, is to determine what the NEXT WORD should be for a GIVEN A SEQUENCE OF WORDS.\n     Behind the scenes, the model calculates the probability of each word in the corpus being the next one and picks one the top rated words.`, `The corpus consists of all the words that the model has seen during its learning phase. More than 50,000 words in a corpus is pretty common.`, `In the example on the left, the current sequence consists of the five words: [\"The\", \"winners\", \"of\", \"this\", \"year's\"].``The model has already calculated the probabilities for the next possible word. We show the top 10 here.`];\n  const customStyles = {\n    content: {\n      height: \"30vh\",\n      width: \"40vw\",\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"danger\",\n        style: {\n          height: \"4vh\",\n          width: \"4vh\",\n          alignSelf: \"end\",\n          justifySelf: \"start\"\n        },\n        onClick: setModalIsOpenToFalse,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginTop: \"5vh\"\n        },\n        children: [\" \", windowTextList[windowTextId], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        onClick: windowTextId === windowTextList.length ? setModalIsOpenToFalse : handleNext,\n        children: windowTextId === windowTextList.length ? \"Complete\" : \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = ModalComponent;\nexport default ModalComponent;\nvar _c;\n$RefreshReg$(_c, \"ModalComponent\");","map":{"version":3,"names":["React","useState","Modal","Button","jsxDEV","_jsxDEV","ModalComponent","windowTextId","handleNext","modalIsOpen","setModalIsOpenToFalse","setModalIsOpenToTrue","windowTextList","customStyles","content","height","width","marginTop","marginBottom","marginRight","marginLeft","backgroundColor","borderRadius","display","justifyContent","flexDirection","children","isOpen","style","color","alignSelf","justifySelf","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\n\nfunction ModalComponent({\n  windowTextId,\n  handleNext,\n  modalIsOpen,\n  setModalIsOpenToFalse,\n  setModalIsOpenToTrue,\n}) {\n  const windowTextList = [\n    \"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\",\n    `The main objective of generative LLMs such as ChatGPT, is to determine what the NEXT WORD should be for a GIVEN A SEQUENCE OF WORDS.\n     Behind the scenes, the model calculates the probability of each word in the corpus being the next one and picks one the top rated words.`,\n    `The corpus consists of all the words that the model has seen during its learning phase. More than 50,000 words in a corpus is pretty common.`,\n    `In the example on the left, the current sequence consists of the five words: [\"The\", \"winners\", \"of\", \"this\", \"year's\"].``The model has already calculated the probabilities for the next possible word. We show the top 10 here.`,\n  ];\n\n  const customStyles = {\n    content: {\n      height: \"30vh\",\n      width: \"40vw\",\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n    },\n  };\n\n  return (\n    <div>\n      <Modal isOpen={modalIsOpen} style={customStyles}>\n        <Button\n          color=\"danger\"\n          style={{\n            height: \"4vh\",\n            width: \"4vh\",\n            alignSelf: \"end\",\n            justifySelf: \"start\",\n          }}\n          onClick={setModalIsOpenToFalse}\n        >\n          x\n        </Button>\n        <p style={{ marginTop: \"5vh\" }}> {windowTextList[windowTextId]} </p>\n        <Button\n          color=\"success\"\n          onClick={\n            windowTextId === windowTextList.length\n              ? setModalIsOpenToFalse\n              : handleNext\n          }\n        >\n          {windowTextId === windowTextList.length ? \"Complete\" : \"Next\"}\n        </Button>\n      </Modal>\n    </div>\n  );\n}\nexport default ModalComponent;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,cAAcA,CAAC;EACtBC,YAAY;EACZC,UAAU;EACVC,WAAW;EACXC,qBAAqB;EACrBC;AACF,CAAC,EAAE;EACD,MAAMC,cAAc,GAAG,CACrB,sHAAsH,EACrH;AACL,8IAA8I,EACzI,8IAA6I,EAC7I,0HAA0H,yGAAwG,CACpO;EAED,MAAMC,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,MAAM;MACbC,SAAS,EAAE,MAAM;MACjBC,YAAY,EAAE,MAAM;MACpBC,WAAW,EAAE,MAAM;MACnBC,UAAU,EAAE,MAAM;MAClBC,eAAe,EAAE,QAAQ;MACzBC,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,aAAa,EAAE;IACjB;EACF,CAAC;EAED,oBACEpB,OAAA;IAAAqB,QAAA,eACErB,OAAA,CAACH,KAAK;MAACyB,MAAM,EAAElB,WAAY;MAACmB,KAAK,EAAEf,YAAa;MAAAa,QAAA,gBAC9CrB,OAAA,CAACF,MAAM;QACL0B,KAAK,EAAC,QAAQ;QACdD,KAAK,EAAE;UACLb,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE,KAAK;UACZc,SAAS,EAAE,KAAK;UAChBC,WAAW,EAAE;QACf,CAAE;QACFC,OAAO,EAAEtB,qBAAsB;QAAAgB,QAAA,EAChC;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT/B,OAAA;QAAGuB,KAAK,EAAE;UAAEX,SAAS,EAAE;QAAM,CAAE;QAAAS,QAAA,GAAC,GAAC,EAACd,cAAc,CAACL,YAAY,CAAC,EAAC,GAAC;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpE/B,OAAA,CAACF,MAAM;QACL0B,KAAK,EAAC,SAAS;QACfG,OAAO,EACLzB,YAAY,KAAKK,cAAc,CAACyB,MAAM,GAClC3B,qBAAqB,GACrBF,UACL;QAAAkB,QAAA,EAEAnB,YAAY,KAAKK,cAAc,CAACyB,MAAM,GAAG,UAAU,GAAG;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACE,EAAA,GA5DQhC,cAAc;AA6DvB,eAAeA,cAAc;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
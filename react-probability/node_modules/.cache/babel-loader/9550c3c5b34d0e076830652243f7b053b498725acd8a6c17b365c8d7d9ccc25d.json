{"ast":null,"code":"var _jsxFileName = \"/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModalComponent({\n  windowTextId,\n  handleNext\n}) {\n  _s();\n  const windowTextList = [\"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\", `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n     Behind the scenes, the model calculates the probability of each word in the corpus being the next one.`, `The corpus consists of all the words that the model has seen during its learning phase. More than 50,000 words in a corpus is pretty common.`, `In the example on the left, the current sequence consists of words: [\"The\", \"winners\", \"of\", \"this\", \"year's\"].\n     The model has already calculated the probabilities for the next possible word. We show the top 10 here.`];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n  const setModalIsOpenToFalse = () => {\n    setModalIsOpen(false);\n  };\n  const customStyles = {\n    content: {\n      height: \"30vh\",\n      width: \"40vw\",\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: setModalIsOpenToTrue,\n      children: \" Instructions \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"danger\",\n        style: {\n          height: \"4vh\",\n          width: \"4vh\",\n          alignSelf: \"end\",\n          justifySelf: \"start\"\n        },\n        onClick: setModalIsOpenToFalse,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginTop: \"5vh\"\n        },\n        children: [\" \", windowTextList[windowTextId], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        onClick: handleNext,\n        children: [\" \", \"Next\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(ModalComponent, \"ZgVrBg3ryxnygUarmoT4hn0caVc=\");\n_c = ModalComponent;\nexport default ModalComponent;\nvar _c;\n$RefreshReg$(_c, \"ModalComponent\");","map":{"version":3,"names":["React","useState","Modal","Button","jsxDEV","_jsxDEV","ModalComponent","windowTextId","handleNext","_s","windowTextList","modalIsOpen","setModalIsOpen","setModalIsOpenToTrue","setModalIsOpenToFalse","customStyles","content","height","width","marginTop","marginBottom","marginRight","marginLeft","backgroundColor","borderRadius","display","justifyContent","flexDirection","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","style","color","alignSelf","justifySelf","_c","$RefreshReg$"],"sources":["/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\n\nfunction ModalComponent({ windowTextId, handleNext }) {\n  const windowTextList = [\n    \"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\",\n    `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n     Behind the scenes, the model calculates the probability of each word in the corpus being the next one.`,\n    `The corpus consists of all the words that the model has seen during its learning phase. More than 50,000 words in a corpus is pretty common.`,\n    `In the example on the left, the current sequence consists of words: [\"The\", \"winners\", \"of\", \"this\", \"year's\"].\n     The model has already calculated the probabilities for the next possible word. We show the top 10 here.`,\n  ];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n\n  const setModalIsOpenToFalse = () => {\n    setModalIsOpen(false);\n  };\n\n  const customStyles = {\n    content: {\n      height: \"30vh\",\n      width: \"40vw\",\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n    },\n  };\n\n  return (\n    <div>\n      <Button onClick={setModalIsOpenToTrue}> Instructions </Button>\n\n      <Modal isOpen={modalIsOpen} style={customStyles}>\n        <Button\n          color=\"danger\"\n          style={{\n            height: \"4vh\",\n            width: \"4vh\",\n            alignSelf: \"end\",\n            justifySelf: \"start\",\n          }}\n          onClick={setModalIsOpenToFalse}\n        >\n          x\n        </Button>\n        <p style={{ marginTop: \"5vh\" }}> {windowTextList[windowTextId]} </p>\n        <Button color=\"success\" onClick={handleNext}>\n          {\" \"}\n          Next{\" \"}\n        </Button>\n      </Modal>\n    </div>\n  );\n}\nexport default ModalComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,cAAcA,CAAC;EAAEC,YAAY;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAMC,cAAc,GAAG,CACrB,sHAAsH,EACrH;AACL,4GAA4G,EACvG,8IAA6I,EAC7I;AACL,6GAA6G,CAC1G;EACD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMY,oBAAoB,GAAGA,CAAA,KAAM;IACjCD,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAME,qBAAqB,GAAGA,CAAA,KAAM;IAClCF,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMG,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,MAAM;MACbC,SAAS,EAAE,MAAM;MACjBC,YAAY,EAAE,MAAM;MACpBC,WAAW,EAAE,MAAM;MACnBC,UAAU,EAAE,MAAM;MAClBC,eAAe,EAAE,QAAQ;MACzBC,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,aAAa,EAAE;IACjB;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA,CAACF,MAAM;MAAC0B,OAAO,EAAEhB,oBAAqB;MAAAe,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE9D5B,OAAA,CAACH,KAAK;MAACgC,MAAM,EAAEvB,WAAY;MAACwB,KAAK,EAAEpB,YAAa;MAAAa,QAAA,gBAC9CvB,OAAA,CAACF,MAAM;QACLiC,KAAK,EAAC,QAAQ;QACdD,KAAK,EAAE;UACLlB,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE,KAAK;UACZmB,SAAS,EAAE,KAAK;UAChBC,WAAW,EAAE;QACf,CAAE;QACFT,OAAO,EAAEf,qBAAsB;QAAAc,QAAA,EAChC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT5B,OAAA;QAAG8B,KAAK,EAAE;UAAEhB,SAAS,EAAE;QAAM,CAAE;QAAAS,QAAA,GAAC,GAAC,EAAClB,cAAc,CAACH,YAAY,CAAC,EAAC,GAAC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpE5B,OAAA,CAACF,MAAM;QAACiC,KAAK,EAAC,SAAS;QAACP,OAAO,EAAErB,UAAW;QAAAoB,QAAA,GACzC,GAAG,EAAC,MACD,EAAC,GAAG;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACxB,EAAA,CA5DQH,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AA6DvB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModalComponent() {\n  _s();\n  const windowTextList = [\"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\", `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n                     Behind the scenes, the model calculates the probability of each word in the corpus being the next one.`];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const [windowTextId, setWindowTextId] = useState(0);\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n  const setModalIsOpenToFalse = () => {\n    setWindowTextId(() => 0);\n    setModalIsOpen(false);\n  };\n  const customStyles = {\n    content: {\n      height: \"30vh\",\n      width: \"40vw\",\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      background: rgba(240, 248, 255, 0.18)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: setModalIsOpenToTrue,\n      children: \" Instructions \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"danger\",\n        style: {\n          height: \"4vh\",\n          width: \"4vh\",\n          alignSelf: \"end\",\n          justifySelf: \"start\"\n        },\n        onClick: setModalIsOpenToFalse,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginTop: \"5vh\"\n        },\n        children: [\" \", windowTextList[windowTextId], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        onClick: () => setWindowTextId(prev => prev + 1),\n        children: [\" \", \"Next\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(ModalComponent, \"BJsWDKi+uK/2SnKy5Tafyfq0Azk=\");\n_c = ModalComponent;\nexport default ModalComponent;\nvar _c;\n$RefreshReg$(_c, \"ModalComponent\");","map":{"version":3,"names":["React","useState","Modal","Button","jsxDEV","_jsxDEV","ModalComponent","_s","windowTextList","modalIsOpen","setModalIsOpen","windowTextId","setWindowTextId","setModalIsOpenToTrue","setModalIsOpenToFalse","customStyles","content","height","width","marginTop","marginBottom","marginRight","marginLeft","backgroundColor","borderRadius","display","justifyContent","flexDirection","background","rgba","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","style","color","alignSelf","justifySelf","prev","_c","$RefreshReg$"],"sources":["/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\n\nfunction ModalComponent() {\n  const windowTextList = [\n    \"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\",\n    `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n                     Behind the scenes, the model calculates the probability of each word in the corpus being the next one.`,\n  ];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const [windowTextId, setWindowTextId] = useState(0);\n\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n\n  const setModalIsOpenToFalse = () => {\n    setWindowTextId(() => 0);\n    setModalIsOpen(false);\n  };\n\n  const customStyles = {\n    content: {\n      height: \"30vh\",\n      width: \"40vw\",\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      background: rgba(240, 248, 255, 0.18),\n    },\n  };\n\n  return (\n    <div>\n      <Button onClick={setModalIsOpenToTrue}> Instructions </Button>\n\n      <Modal isOpen={modalIsOpen} style={customStyles}>\n        <Button\n          color=\"danger\"\n          style={{\n            height: \"4vh\",\n            width: \"4vh\",\n            alignSelf: \"end\",\n            justifySelf: \"start\",\n          }}\n          onClick={setModalIsOpenToFalse}\n        >\n          x\n        </Button>\n        <p style={{ marginTop: \"5vh\" }}> {windowTextList[windowTextId]} </p>\n        <Button\n          color=\"success\"\n          onClick={() => setWindowTextId((prev) => prev + 1)}\n        >\n          {\" \"}\n          Next{\" \"}\n        </Button>\n      </Modal>\n    </div>\n  );\n}\nexport default ModalComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
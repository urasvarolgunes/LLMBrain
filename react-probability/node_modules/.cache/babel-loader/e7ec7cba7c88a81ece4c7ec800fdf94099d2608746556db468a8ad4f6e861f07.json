{"ast":null,"code":"var _jsxFileName = \"/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModalComponent() {\n  _s();\n  const windowTextList = [\"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\", `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n                     Behind the scenes, the model calculates the probability of each word in the corpus being the next one.`];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const [windowTextId, setWindowTextId] = useState(0);\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n  const setModalIsOpenToFalse = () => {\n    setWindowTextId(() => 0);\n    setModalIsOpen(false);\n  };\n  const customStyles = {\n    content: {\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: setModalIsOpenToTrue,\n      children: \" Instructions \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"danger\",\n        style: {\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: 0\n        },\n        onClick: setModalIsOpenToFalse,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", windowTextList[windowTextId], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        onClick: () => setWindowTextId(prev => prev + 1),\n        children: [\" \", \"Next\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(ModalComponent, \"BJsWDKi+uK/2SnKy5Tafyfq0Azk=\");\n_c = ModalComponent;\nexport default ModalComponent;\nvar _c;\n$RefreshReg$(_c, \"ModalComponent\");","map":{"version":3,"names":["React","useState","Modal","Button","jsxDEV","_jsxDEV","ModalComponent","_s","windowTextList","modalIsOpen","setModalIsOpen","windowTextId","setWindowTextId","setModalIsOpenToTrue","setModalIsOpenToFalse","customStyles","content","marginTop","marginBottom","marginRight","marginLeft","backgroundColor","borderRadius","display","justifyContent","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","style","color","prev","_c","$RefreshReg$"],"sources":["/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\n\nfunction ModalComponent() {\n  const windowTextList = [\n    \"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\",\n    `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n                     Behind the scenes, the model calculates the probability of each word in the corpus being the next one.`,\n  ];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const [windowTextId, setWindowTextId] = useState(0);\n\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n\n  const setModalIsOpenToFalse = () => {\n    setWindowTextId(() => 0);\n    setModalIsOpen(false);\n  };\n\n  const customStyles = {\n    content: {\n      marginTop: \"30vh\",\n      marginBottom: \"25vh\",\n      marginRight: \"25vw\",\n      marginLeft: \"45vw\",\n      backgroundColor: \"orange\",\n      borderRadius: \"20px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n  };\n\n  return (\n    <div>\n      <Button onClick={setModalIsOpenToTrue}> Instructions </Button>\n\n      <Modal isOpen={modalIsOpen} style={customStyles}>\n        <Button\n          color=\"danger\"\n          style={{ display: \"block\", marginLeft: \"auto\", marginRight: 0 }}\n          onClick={setModalIsOpenToFalse}\n        >\n          x\n        </Button>\n        <p> {windowTextList[windowTextId]} </p>\n        <Button\n          color=\"success\"\n          onClick={() => setWindowTextId((prev) => prev + 1)}\n        >\n          {\" \"}\n          Next{\" \"}\n        </Button>\n      </Modal>\n    </div>\n  );\n}\nexport default ModalComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAMC,cAAc,GAAG,CACrB,sHAAsH,EACrH;AACL,4HAA4H,CACzH;EACD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAMY,oBAAoB,GAAGA,CAAA,KAAM;IACjCH,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;IAClCF,eAAe,CAAC,MAAM,CAAC,CAAC;IACxBF,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMK,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,SAAS,EAAE,MAAM;MACjBC,YAAY,EAAE,MAAM;MACpBC,WAAW,EAAE,MAAM;MACnBC,UAAU,EAAE,MAAM;MAClBC,eAAe,EAAE,QAAQ;MACzBC,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE;IAClB;EACF,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA,CAACF,MAAM;MAACuB,OAAO,EAAEb,oBAAqB;MAAAY,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE9DzB,OAAA,CAACH,KAAK;MAAC6B,MAAM,EAAEtB,WAAY;MAACuB,KAAK,EAAEjB,YAAa;MAAAU,QAAA,gBAC9CpB,OAAA,CAACF,MAAM;QACL8B,KAAK,EAAC,QAAQ;QACdD,KAAK,EAAE;UAAET,OAAO,EAAE,OAAO;UAAEH,UAAU,EAAE,MAAM;UAAED,WAAW,EAAE;QAAE,CAAE;QAChEO,OAAO,EAAEZ,qBAAsB;QAAAW,QAAA,EAChC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTzB,OAAA;QAAAoB,QAAA,GAAG,GAAC,EAACjB,cAAc,CAACG,YAAY,CAAC,EAAC,GAAC;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACvCzB,OAAA,CAACF,MAAM;QACL8B,KAAK,EAAC,SAAS;QACfP,OAAO,EAAEA,CAAA,KAAMd,eAAe,CAAEsB,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAE;QAAAT,QAAA,GAElD,GAAG,EAAC,MACD,EAAC,GAAG;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACvB,EAAA,CAtDQD,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAuDvB,eAAeA,cAAc;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ModalComponent() {\n  _s();\n  const windowTextList = [\"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\", `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n                     Behind the scenes, the model calculates the probabilty of each word in the corpus being the next one.`];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const [windowTextId, setWindowTextId] = useState(0);\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n  const setModalIsOpenToFalse = () => {\n    setWindowTextId(() => 0);\n    setModalIsOpen(false);\n  };\n  const customStyles = {\n    content: {\n      marginRight: \"25vw\",\n      marginLeft: \"25vw\",\n      transform: \"translate(-50%, -50%)\",\n      backgroundColor: \"#F0AA89\",\n      borderRadius: \"20px\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: setModalIsOpenToTrue,\n      children: \" Instructions \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          float: \"right\"\n        },\n        onClick: setModalIsOpenToFalse,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", windowTextList[windowTextId], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        onClick: () => setWindowTextId(prev => prev + 1),\n        children: [\" \", \"Next\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ModalComponent, \"BJsWDKi+uK/2SnKy5Tafyfq0Azk=\");\n_c = ModalComponent;\nexport default ModalComponent;\nvar _c;\n$RefreshReg$(_c, \"ModalComponent\");","map":{"version":3,"names":["React","useState","Modal","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","ModalComponent","_s","windowTextList","modalIsOpen","setModalIsOpen","windowTextId","setWindowTextId","setModalIsOpenToTrue","setModalIsOpenToFalse","customStyles","content","marginRight","marginLeft","transform","backgroundColor","borderRadius","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","style","float","color","prev","_c","$RefreshReg$"],"sources":["/Users/urasvarolgunes/Desktop/react-probability/src/IntroModal.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"reactstrap\";\n\nfunction ModalComponent() {\n  const windowTextList = [\n    \"Welcome to LLMBrain! This app lets you play with Large Language Models and observe how they think behind the scenes.\",\n    `The main objective of generative LLMs such as ChatGPT, is to determine what the next word should be for a given sequence of words.\n                     Behind the scenes, the model calculates the probabilty of each word in the corpus being the next one.`,\n  ];\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const [windowTextId, setWindowTextId] = useState(0);\n\n  const setModalIsOpenToTrue = () => {\n    setModalIsOpen(true);\n  };\n\n  const setModalIsOpenToFalse = () => {\n    setWindowTextId(() => 0);\n    setModalIsOpen(false);\n  };\n\n  const customStyles = {\n    content: {\n      marginRight: \"25vw\",\n      marginLeft: \"25vw\",\n      transform: \"translate(-50%, -50%)\",\n      backgroundColor: \"#F0AA89\",\n      borderRadius: \"20px\",\n    },\n  };\n\n  return (\n    <>\n      <Button onClick={setModalIsOpenToTrue}> Instructions </Button>\n\n      <Modal isOpen={modalIsOpen} style={customStyles}>\n        <Button style={{ float: \"right\" }} onClick={setModalIsOpenToFalse}>\n          x\n        </Button>\n        <p> {windowTextList[windowTextId]} </p>\n        <Button\n          color=\"success\"\n          onClick={() => setWindowTextId((prev) => prev + 1)}\n        >\n          {\" \"}\n          Next{\" \"}\n        </Button>\n      </Modal>\n    </>\n  );\n}\nexport default ModalComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAMC,cAAc,GAAG,CACrB,sHAAsH,EACrH;AACL,2HAA2H,CACxH;EACD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAMc,oBAAoB,GAAGA,CAAA,KAAM;IACjCH,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;IAClCF,eAAe,CAAC,MAAM,CAAC,CAAC;IACxBF,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMK,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,WAAW,EAAE,MAAM;MACnBC,UAAU,EAAE,MAAM;MAClBC,SAAS,EAAE,uBAAuB;MAClCC,eAAe,EAAE,SAAS;MAC1BC,YAAY,EAAE;IAChB;EACF,CAAC;EAED,oBACElB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA,CAACF,MAAM;MAACsB,OAAO,EAAEV,oBAAqB;MAAAS,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE9DxB,OAAA,CAACH,KAAK;MAAC4B,MAAM,EAAEnB,WAAY;MAACoB,KAAK,EAAEd,YAAa;MAAAO,QAAA,gBAC9CnB,OAAA,CAACF,MAAM;QAAC4B,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAACP,OAAO,EAAET,qBAAsB;QAAAQ,QAAA,EAAC;MAEnE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTxB,OAAA;QAAAmB,QAAA,GAAG,GAAC,EAACd,cAAc,CAACG,YAAY,CAAC,EAAC,GAAC;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACvCxB,OAAA,CAACF,MAAM;QACL8B,KAAK,EAAC,SAAS;QACfR,OAAO,EAAEA,CAAA,KAAMX,eAAe,CAAEoB,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAE;QAAAV,QAAA,GAElD,GAAG,EAAC,MACD,EAAC,GAAG;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA,eACR,CAAC;AAEP;AAACpB,EAAA,CA/CQD,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AAgDvB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}